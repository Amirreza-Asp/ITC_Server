// <auto-generated />
using System;
using Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20231208111239_AddProgram")]
    partial class AddProgram
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Domain.Entities.Account.Act", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("Act");
                });

            modelBuilder.Entity("Domain.Entities.Account.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreateAt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Latitude")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Logo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Longitude")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NationalSerial")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PortalUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Province")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UniversityType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Company");
                });

            modelBuilder.Entity("Domain.Entities.Account.Permission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PermissionContainerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PermissionContainerId");

                    b.ToTable("Permissions");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Permission");
                });

            modelBuilder.Entity("Domain.Entities.Account.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Value")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("Domain.Entities.Account.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Domain.Entities.Account.RolePermission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PermissionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId");

                    b.ToTable("RolePermissions");
                });

            modelBuilder.Entity("Domain.Entities.Account.Token", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("HashValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Tokens");
                });

            modelBuilder.Entity("Domain.Entities.Account.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Family")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NationalId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("NationalId")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Domain.Entities.Account.UserJoinRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NationalId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("UsersJoinRequests");
                });

            modelBuilder.Entity("Domain.Entities.Business.BigGoal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ProgramYearId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ProgramYearId");

                    b.ToTable("BigGoals");
                });

            modelBuilder.Entity("Domain.Entities.Business.BigGoalIndicator", b =>
                {
                    b.Property<Guid>("IndicatorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BigGoalId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("IndicatorId", "BigGoalId");

                    b.HasIndex("BigGoalId");

                    b.ToTable("BigGoalIndicators");
                });

            modelBuilder.Entity("Domain.Entities.Business.CompanyIndicator", b =>
                {
                    b.Property<Guid>("IndicatorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("IndicatorId", "CompanyId");

                    b.HasIndex("CompanyId");

                    b.ToTable("CompanyIndicators");
                });

            modelBuilder.Entity("Domain.Entities.Business.HardwareEquipment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BrandName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SupportType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("HardwareEquipment");
                });

            modelBuilder.Entity("Domain.Entities.Business.Indicator", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("GoalValue")
                        .HasColumnType("bigint");

                    b.Property<long>("InitValue")
                        .HasColumnType("bigint");

                    b.Property<int>("Period")
                        .HasColumnType("int");

                    b.Property<DateTime>("ToDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("TypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("TypeId");

                    b.ToTable("Indicators");
                });

            modelBuilder.Entity("Domain.Entities.Business.IndicatorProgress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("IndicatorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ProgressTime")
                        .HasColumnType("datetime2");

                    b.Property<long>("Value")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("IndicatorId");

                    b.ToTable("IndicatorProgresses");
                });

            modelBuilder.Entity("Domain.Entities.Business.OperationalObjective", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BigGoalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("Budget")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("GuaranteedFulfillmentAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BigGoalId");

                    b.ToTable("OperationalObjectives");
                });

            modelBuilder.Entity("Domain.Entities.Business.OperationalObjectiveIndicator", b =>
                {
                    b.Property<Guid>("IndicatorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OperationalObjectiveId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("IndicatorId", "OperationalObjectiveId");

                    b.HasIndex("OperationalObjectiveId");

                    b.ToTable("OperationalObjectiveIndicators");
                });

            modelBuilder.Entity("Domain.Entities.Business.Person", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Education")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Family")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("People");
                });

            modelBuilder.Entity("Domain.Entities.Business.Program", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Program");
                });

            modelBuilder.Entity("Domain.Entities.Business.ProgramBigGoal", b =>
                {
                    b.Property<Guid>("BigGoalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProgramId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BigGoalId", "ProgramId");

                    b.HasIndex("ProgramId");

                    b.ToTable("ProgramBigGoal");
                });

            modelBuilder.Entity("Domain.Entities.Business.System", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BuildInCompany")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Database")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Development")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Framework")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OS")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProgrammingLanguage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SupportType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Systems");
                });

            modelBuilder.Entity("Domain.Entities.Business.Transition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Contractor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("LeaderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OperationalObjectiveId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LeaderId");

                    b.HasIndex("OperationalObjectiveId");

                    b.HasIndex("ParentId");

                    b.ToTable("Transitions");
                });

            modelBuilder.Entity("Domain.Entities.Business.TransitionIndicator", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IndicatorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("Transition")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TransitionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("IndicatorId");

                    b.HasIndex("Transition");

                    b.ToTable("TransitionIndicators");
                });

            modelBuilder.Entity("Domain.Entities.Static.IndicatorCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("IndicatorCategories");
                });

            modelBuilder.Entity("Domain.Entities.Static.IndicatorType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("IndicatorTypes");
                });

            modelBuilder.Entity("Domain.Entities.Static.ProgramYear", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Year")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ProgramYears");
                });

            modelBuilder.Entity("Domain.Entities.Account.PermissionContainer", b =>
                {
                    b.HasBaseType("Domain.Entities.Account.Permission");

                    b.HasDiscriminator().HasValue("PermissionContainer");
                });

            modelBuilder.Entity("Domain.Entities.Account.PermissionItem", b =>
                {
                    b.HasBaseType("Domain.Entities.Account.Permission");

                    b.Property<string>("PageValue")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("PermissionItem");
                });

            modelBuilder.Entity("Domain.Entities.Account.Act", b =>
                {
                    b.HasOne("Domain.Entities.Account.Company", "Company")
                        .WithMany("Acts")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Account.Role", "Role")
                        .WithMany("Acts")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Account.User", "User")
                        .WithMany("Act")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Account.Company", b =>
                {
                    b.HasOne("Domain.Entities.Account.Company", "Parent")
                        .WithMany("Childs")
                        .HasForeignKey("ParentId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Domain.Entities.Account.Permission", b =>
                {
                    b.HasOne("Domain.Entities.Account.PermissionContainer", null)
                        .WithMany("Childrens")
                        .HasForeignKey("PermissionContainerId");
                });

            modelBuilder.Entity("Domain.Entities.Account.RefreshToken", b =>
                {
                    b.HasOne("Domain.Entities.Account.User", "User")
                        .WithOne("RefreshToken")
                        .HasForeignKey("Domain.Entities.Account.RefreshToken", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Account.RolePermission", b =>
                {
                    b.HasOne("Domain.Entities.Account.Permission", "Permission")
                        .WithMany("Roles")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Account.Role", "Role")
                        .WithMany("Permissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Domain.Entities.Account.Token", b =>
                {
                    b.HasOne("Domain.Entities.Account.User", "User")
                        .WithOne("Token")
                        .HasForeignKey("Domain.Entities.Account.Token", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Account.UserJoinRequest", b =>
                {
                    b.HasOne("Domain.Entities.Account.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Domain.Entities.Business.BigGoal", b =>
                {
                    b.HasOne("Domain.Entities.Account.Company", null)
                        .WithMany("BigGoals")
                        .HasForeignKey("CompanyId");

                    b.HasOne("Domain.Entities.Static.ProgramYear", null)
                        .WithMany("BigGoals")
                        .HasForeignKey("ProgramYearId");
                });

            modelBuilder.Entity("Domain.Entities.Business.BigGoalIndicator", b =>
                {
                    b.HasOne("Domain.Entities.Business.BigGoal", "BigGoal")
                        .WithMany("Indicators")
                        .HasForeignKey("BigGoalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Business.Indicator", "Indicator")
                        .WithMany()
                        .HasForeignKey("IndicatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BigGoal");

                    b.Navigation("Indicator");
                });

            modelBuilder.Entity("Domain.Entities.Business.CompanyIndicator", b =>
                {
                    b.HasOne("Domain.Entities.Account.Company", "Company")
                        .WithMany("Indicators")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Business.Indicator", "Indicator")
                        .WithMany()
                        .HasForeignKey("IndicatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Indicator");
                });

            modelBuilder.Entity("Domain.Entities.Business.HardwareEquipment", b =>
                {
                    b.HasOne("Domain.Entities.Account.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Domain.Entities.Business.Indicator", b =>
                {
                    b.HasOne("Domain.Entities.Static.IndicatorCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Static.IndicatorType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("Domain.Entities.Business.IndicatorProgress", b =>
                {
                    b.HasOne("Domain.Entities.Business.Indicator", "Indicator")
                        .WithMany("Progresses")
                        .HasForeignKey("IndicatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Indicator");
                });

            modelBuilder.Entity("Domain.Entities.Business.OperationalObjective", b =>
                {
                    b.HasOne("Domain.Entities.Business.BigGoal", "BigGoal")
                        .WithMany("OperationalObjectives")
                        .HasForeignKey("BigGoalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BigGoal");
                });

            modelBuilder.Entity("Domain.Entities.Business.OperationalObjectiveIndicator", b =>
                {
                    b.HasOne("Domain.Entities.Business.Indicator", "Indicator")
                        .WithMany()
                        .HasForeignKey("IndicatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Business.OperationalObjective", "OperationalObjective")
                        .WithMany("Indicators")
                        .HasForeignKey("OperationalObjectiveId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Indicator");

                    b.Navigation("OperationalObjective");
                });

            modelBuilder.Entity("Domain.Entities.Business.Person", b =>
                {
                    b.HasOne("Domain.Entities.Account.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("Domain.Entities.Business.Expertise", "Expertises", b1 =>
                        {
                            b1.Property<Guid>("PersonId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"), 1L, 1);

                            b1.Property<string>("Title")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("title");

                            b1.HasKey("PersonId", "Id");

                            b1.ToTable("Expertise");

                            b1.WithOwner()
                                .HasForeignKey("PersonId");
                        });

                    b.Navigation("Company");

                    b.Navigation("Expertises");
                });

            modelBuilder.Entity("Domain.Entities.Business.Program", b =>
                {
                    b.HasOne("Domain.Entities.Account.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Domain.Entities.Business.ProgramBigGoal", b =>
                {
                    b.HasOne("Domain.Entities.Business.BigGoal", "BigGoal")
                        .WithMany("Programs")
                        .HasForeignKey("BigGoalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Business.Program", "Program")
                        .WithMany("BigGoals")
                        .HasForeignKey("ProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BigGoal");

                    b.Navigation("Program");
                });

            modelBuilder.Entity("Domain.Entities.Business.System", b =>
                {
                    b.HasOne("Domain.Entities.Account.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Domain.Entities.Business.Transition", b =>
                {
                    b.HasOne("Domain.Entities.Business.Person", "Leader")
                        .WithMany("Transitions")
                        .HasForeignKey("LeaderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Business.OperationalObjective", "OperationalObjective")
                        .WithMany("Transitions")
                        .HasForeignKey("OperationalObjectiveId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Business.Transition", "Parent")
                        .WithMany("Childs")
                        .HasForeignKey("ParentId");

                    b.OwnsMany("Domain.SubEntities.Financial", "Financials", b1 =>
                        {
                            b1.Property<Guid>("TransitionId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"), 1L, 1);

                            b1.Property<string>("Title")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("title");

                            b1.HasKey("TransitionId", "Id");

                            b1.ToTable("Financial");

                            b1.WithOwner()
                                .HasForeignKey("TransitionId");
                        });

                    b.Navigation("Financials");

                    b.Navigation("Leader");

                    b.Navigation("OperationalObjective");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Domain.Entities.Business.TransitionIndicator", b =>
                {
                    b.HasOne("Domain.Entities.Business.Indicator", "Indicator")
                        .WithMany()
                        .HasForeignKey("IndicatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Business.Transition", "Project")
                        .WithMany("Indicators")
                        .HasForeignKey("Transition");

                    b.Navigation("Indicator");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Domain.Entities.Static.IndicatorCategory", b =>
                {
                    b.HasOne("Domain.Entities.Static.IndicatorCategory", "Parent")
                        .WithMany("Childs")
                        .HasForeignKey("ParentId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Domain.Entities.Account.Company", b =>
                {
                    b.Navigation("Acts");

                    b.Navigation("BigGoals");

                    b.Navigation("Childs");

                    b.Navigation("Indicators");
                });

            modelBuilder.Entity("Domain.Entities.Account.Permission", b =>
                {
                    b.Navigation("Roles");
                });

            modelBuilder.Entity("Domain.Entities.Account.Role", b =>
                {
                    b.Navigation("Acts");

                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("Domain.Entities.Account.User", b =>
                {
                    b.Navigation("Act");

                    b.Navigation("RefreshToken");

                    b.Navigation("Token");
                });

            modelBuilder.Entity("Domain.Entities.Business.BigGoal", b =>
                {
                    b.Navigation("Indicators");

                    b.Navigation("OperationalObjectives");

                    b.Navigation("Programs");
                });

            modelBuilder.Entity("Domain.Entities.Business.Indicator", b =>
                {
                    b.Navigation("Progresses");
                });

            modelBuilder.Entity("Domain.Entities.Business.OperationalObjective", b =>
                {
                    b.Navigation("Indicators");

                    b.Navigation("Transitions");
                });

            modelBuilder.Entity("Domain.Entities.Business.Person", b =>
                {
                    b.Navigation("Transitions");
                });

            modelBuilder.Entity("Domain.Entities.Business.Program", b =>
                {
                    b.Navigation("BigGoals");
                });

            modelBuilder.Entity("Domain.Entities.Business.Transition", b =>
                {
                    b.Navigation("Childs");

                    b.Navigation("Indicators");
                });

            modelBuilder.Entity("Domain.Entities.Static.IndicatorCategory", b =>
                {
                    b.Navigation("Childs");
                });

            modelBuilder.Entity("Domain.Entities.Static.ProgramYear", b =>
                {
                    b.Navigation("BigGoals");
                });

            modelBuilder.Entity("Domain.Entities.Account.PermissionContainer", b =>
                {
                    b.Navigation("Childrens");
                });
#pragma warning restore 612, 618
        }
    }
}
